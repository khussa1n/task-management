// Code generated by MockGen. DO NOT EDIT.
// Source: internal\repository\repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/khussa1n/task-management/internal/entity"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(ctx context.Context, u *entity.Users) (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), ctx, u)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUser) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUser)(nil).DeleteUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockUser) GetUserByEmail(ctx context.Context, email string) (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUser)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUser) GetUserByID(ctx context.Context, id int64) (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUser)(nil).GetUserByID), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockUser) UpdateUser(ctx context.Context, u *entity.Users) (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserMockRecorder) UpdateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUser)(nil).UpdateUser), ctx, u)
}

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTask) CreateTask(ctx context.Context, t *entity.Tasks) (*entity.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, t)
	ret0, _ := ret[0].(*entity.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskMockRecorder) CreateTask(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTask)(nil).CreateTask), ctx, t)
}

// DeleteTask mocks base method.
func (m *MockTask) DeleteTask(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskMockRecorder) DeleteTask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTask)(nil).DeleteTask), ctx, id)
}

// GetAllTasks mocks base method.
func (m *MockTask) GetAllTasks(ctx context.Context, id int64) ([]entity.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", ctx, id)
	ret0, _ := ret[0].([]entity.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTaskMockRecorder) GetAllTasks(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTask)(nil).GetAllTasks), ctx, id)
}

// UpdateTask mocks base method.
func (m *MockTask) UpdateTask(ctx context.Context, t *entity.Tasks) (*entity.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, t)
	ret0, _ := ret[0].(*entity.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskMockRecorder) UpdateTask(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTask)(nil).UpdateTask), ctx, t)
}

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// CreateStatus mocks base method.
func (m *MockStatus) CreateStatus(ctx context.Context, s *entity.Statuses) (*entity.Statuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", ctx, s)
	ret0, _ := ret[0].(*entity.Statuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockStatusMockRecorder) CreateStatus(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockStatus)(nil).CreateStatus), ctx, s)
}

// DeleteStatus mocks base method.
func (m *MockStatus) DeleteStatus(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatus", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatus indicates an expected call of DeleteStatus.
func (mr *MockStatusMockRecorder) DeleteStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatus", reflect.TypeOf((*MockStatus)(nil).DeleteStatus), ctx, id)
}

// GetAllStatuses mocks base method.
func (m *MockStatus) GetAllStatuses(ctx context.Context) ([]entity.Statuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStatuses", ctx)
	ret0, _ := ret[0].([]entity.Statuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStatuses indicates an expected call of GetAllStatuses.
func (mr *MockStatusMockRecorder) GetAllStatuses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStatuses", reflect.TypeOf((*MockStatus)(nil).GetAllStatuses), ctx)
}

// MockRole is a mock of Role interface.
type MockRole struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMockRecorder
}

// MockRoleMockRecorder is the mock recorder for MockRole.
type MockRoleMockRecorder struct {
	mock *MockRole
}

// NewMockRole creates a new mock instance.
func NewMockRole(ctrl *gomock.Controller) *MockRole {
	mock := &MockRole{ctrl: ctrl}
	mock.recorder = &MockRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRole) EXPECT() *MockRoleMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockRole) CreateRole(ctx context.Context, r *entity.Roles) (*entity.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, r)
	ret0, _ := ret[0].(*entity.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleMockRecorder) CreateRole(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRole)(nil).CreateRole), ctx, r)
}

// DeleteRole mocks base method.
func (m *MockRole) DeleteRole(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRole)(nil).DeleteRole), ctx, id)
}

// GetAllRoles mocks base method.
func (m *MockRole) GetAllRoles(ctx context.Context) ([]entity.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", ctx)
	ret0, _ := ret[0].([]entity.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockRoleMockRecorder) GetAllRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockRole)(nil).GetAllRoles), ctx)
}

// MockPriority is a mock of Priority interface.
type MockPriority struct {
	ctrl     *gomock.Controller
	recorder *MockPriorityMockRecorder
}

// MockPriorityMockRecorder is the mock recorder for MockPriority.
type MockPriorityMockRecorder struct {
	mock *MockPriority
}

// NewMockPriority creates a new mock instance.
func NewMockPriority(ctrl *gomock.Controller) *MockPriority {
	mock := &MockPriority{ctrl: ctrl}
	mock.recorder = &MockPriorityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriority) EXPECT() *MockPriorityMockRecorder {
	return m.recorder
}

// CreatePriority mocks base method.
func (m *MockPriority) CreatePriority(ctx context.Context, p *entity.Priorities) (*entity.Priorities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePriority", ctx, p)
	ret0, _ := ret[0].(*entity.Priorities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePriority indicates an expected call of CreatePriority.
func (mr *MockPriorityMockRecorder) CreatePriority(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePriority", reflect.TypeOf((*MockPriority)(nil).CreatePriority), ctx, p)
}

// DeletePriority mocks base method.
func (m *MockPriority) DeletePriority(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePriority", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePriority indicates an expected call of DeletePriority.
func (mr *MockPriorityMockRecorder) DeletePriority(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePriority", reflect.TypeOf((*MockPriority)(nil).DeletePriority), ctx, id)
}

// GetAllPriorities mocks base method.
func (m *MockPriority) GetAllPriorities(ctx context.Context) ([]entity.Priorities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPriorities", ctx)
	ret0, _ := ret[0].([]entity.Priorities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPriorities indicates an expected call of GetAllPriorities.
func (mr *MockPriorityMockRecorder) GetAllPriorities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPriorities", reflect.TypeOf((*MockPriority)(nil).GetAllPriorities), ctx)
}

// MockAction is a mock of Action interface.
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction.
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance.
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// CreateAction mocks base method.
func (m *MockAction) CreateAction(ctx context.Context, a *entity.Actions) (*entity.Actions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAction", ctx, a)
	ret0, _ := ret[0].(*entity.Actions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAction indicates an expected call of CreateAction.
func (mr *MockActionMockRecorder) CreateAction(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAction", reflect.TypeOf((*MockAction)(nil).CreateAction), ctx, a)
}

// DeleteAction mocks base method.
func (m *MockAction) DeleteAction(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAction", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAction indicates an expected call of DeleteAction.
func (mr *MockActionMockRecorder) DeleteAction(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAction", reflect.TypeOf((*MockAction)(nil).DeleteAction), ctx, id)
}

// GetAllActions mocks base method.
func (m *MockAction) GetAllActions(ctx context.Context) ([]entity.Actions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActions", ctx)
	ret0, _ := ret[0].([]entity.Actions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActions indicates an expected call of GetAllActions.
func (mr *MockActionMockRecorder) GetAllActions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActions", reflect.TypeOf((*MockAction)(nil).GetAllActions), ctx)
}

// MockComment is a mock of Comment interface.
type MockComment struct {
	ctrl     *gomock.Controller
	recorder *MockCommentMockRecorder
}

// MockCommentMockRecorder is the mock recorder for MockComment.
type MockCommentMockRecorder struct {
	mock *MockComment
}

// NewMockComment creates a new mock instance.
func NewMockComment(ctrl *gomock.Controller) *MockComment {
	mock := &MockComment{ctrl: ctrl}
	mock.recorder = &MockCommentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComment) EXPECT() *MockCommentMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockComment) CreateComment(ctx context.Context, c *entity.Comments) (*entity.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, c)
	ret0, _ := ret[0].(*entity.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentMockRecorder) CreateComment(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockComment)(nil).CreateComment), ctx, c)
}

// DeleteComment mocks base method.
func (m *MockComment) DeleteComment(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockComment)(nil).DeleteComment), ctx, id)
}

// GetAllComments mocks base method.
func (m *MockComment) GetAllComments(ctx context.Context, userID int64) ([]entity.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComments", ctx, userID)
	ret0, _ := ret[0].([]entity.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllComments indicates an expected call of GetAllComments.
func (mr *MockCommentMockRecorder) GetAllComments(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComments", reflect.TypeOf((*MockComment)(nil).GetAllComments), ctx, userID)
}

// MockTaskLog is a mock of TaskLog interface.
type MockTaskLog struct {
	ctrl     *gomock.Controller
	recorder *MockTaskLogMockRecorder
}

// MockTaskLogMockRecorder is the mock recorder for MockTaskLog.
type MockTaskLogMockRecorder struct {
	mock *MockTaskLog
}

// NewMockTaskLog creates a new mock instance.
func NewMockTaskLog(ctrl *gomock.Controller) *MockTaskLog {
	mock := &MockTaskLog{ctrl: ctrl}
	mock.recorder = &MockTaskLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskLog) EXPECT() *MockTaskLogMockRecorder {
	return m.recorder
}

// CreateTaskLog mocks base method.
func (m *MockTaskLog) CreateTaskLog(ctx context.Context, tl *entity.TaskLogs) (*entity.TaskLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskLog", ctx, tl)
	ret0, _ := ret[0].(*entity.TaskLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskLog indicates an expected call of CreateTaskLog.
func (mr *MockTaskLogMockRecorder) CreateTaskLog(ctx, tl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskLog", reflect.TypeOf((*MockTaskLog)(nil).CreateTaskLog), ctx, tl)
}

// GetAllTaskLogsByTaskID mocks base method.
func (m *MockTaskLog) GetAllTaskLogsByTaskID(ctx context.Context, taskID int64) ([]entity.TaskLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTaskLogsByTaskID", ctx, taskID)
	ret0, _ := ret[0].([]entity.TaskLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTaskLogsByTaskID indicates an expected call of GetAllTaskLogsByTaskID.
func (mr *MockTaskLogMockRecorder) GetAllTaskLogsByTaskID(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTaskLogsByTaskID", reflect.TypeOf((*MockTaskLog)(nil).GetAllTaskLogsByTaskID), ctx, taskID)
}

// UpdateTaskLog mocks base method.
func (m *MockTaskLog) UpdateTaskLog(ctx context.Context, tl *entity.TaskLogs) (*entity.TaskLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskLog", ctx, tl)
	ret0, _ := ret[0].(*entity.TaskLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskLog indicates an expected call of UpdateTaskLog.
func (mr *MockTaskLogMockRecorder) UpdateTaskLog(ctx, tl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskLog", reflect.TypeOf((*MockTaskLog)(nil).UpdateTaskLog), ctx, tl)
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEvent) CreateEvent(ctx context.Context, e *entity.Events) (*entity.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, e)
	ret0, _ := ret[0].(*entity.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventMockRecorder) CreateEvent(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEvent)(nil).CreateEvent), ctx, e)
}

// GetAllEventsByTaskID mocks base method.
func (m *MockEvent) GetAllEventsByTaskID(ctx context.Context, taskID int64) ([]entity.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEventsByTaskID", ctx, taskID)
	ret0, _ := ret[0].([]entity.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEventsByTaskID indicates an expected call of GetAllEventsByTaskID.
func (mr *MockEventMockRecorder) GetAllEventsByTaskID(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEventsByTaskID", reflect.TypeOf((*MockEvent)(nil).GetAllEventsByTaskID), ctx, taskID)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAction mocks base method.
func (m *MockRepository) CreateAction(ctx context.Context, a *entity.Actions) (*entity.Actions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAction", ctx, a)
	ret0, _ := ret[0].(*entity.Actions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAction indicates an expected call of CreateAction.
func (mr *MockRepositoryMockRecorder) CreateAction(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAction", reflect.TypeOf((*MockRepository)(nil).CreateAction), ctx, a)
}

// CreateComment mocks base method.
func (m *MockRepository) CreateComment(ctx context.Context, c *entity.Comments) (*entity.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, c)
	ret0, _ := ret[0].(*entity.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockRepositoryMockRecorder) CreateComment(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockRepository)(nil).CreateComment), ctx, c)
}

// CreateEvent mocks base method.
func (m *MockRepository) CreateEvent(ctx context.Context, e *entity.Events) (*entity.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, e)
	ret0, _ := ret[0].(*entity.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockRepositoryMockRecorder) CreateEvent(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockRepository)(nil).CreateEvent), ctx, e)
}

// CreatePriority mocks base method.
func (m *MockRepository) CreatePriority(ctx context.Context, p *entity.Priorities) (*entity.Priorities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePriority", ctx, p)
	ret0, _ := ret[0].(*entity.Priorities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePriority indicates an expected call of CreatePriority.
func (mr *MockRepositoryMockRecorder) CreatePriority(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePriority", reflect.TypeOf((*MockRepository)(nil).CreatePriority), ctx, p)
}

// CreateRole mocks base method.
func (m *MockRepository) CreateRole(ctx context.Context, r *entity.Roles) (*entity.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, r)
	ret0, _ := ret[0].(*entity.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRepositoryMockRecorder) CreateRole(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRepository)(nil).CreateRole), ctx, r)
}

// CreateStatus mocks base method.
func (m *MockRepository) CreateStatus(ctx context.Context, s *entity.Statuses) (*entity.Statuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", ctx, s)
	ret0, _ := ret[0].(*entity.Statuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockRepositoryMockRecorder) CreateStatus(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockRepository)(nil).CreateStatus), ctx, s)
}

// CreateTask mocks base method.
func (m *MockRepository) CreateTask(ctx context.Context, t *entity.Tasks) (*entity.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, t)
	ret0, _ := ret[0].(*entity.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockRepositoryMockRecorder) CreateTask(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockRepository)(nil).CreateTask), ctx, t)
}

// CreateTaskLog mocks base method.
func (m *MockRepository) CreateTaskLog(ctx context.Context, tl *entity.TaskLogs) (*entity.TaskLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskLog", ctx, tl)
	ret0, _ := ret[0].(*entity.TaskLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskLog indicates an expected call of CreateTaskLog.
func (mr *MockRepositoryMockRecorder) CreateTaskLog(ctx, tl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskLog", reflect.TypeOf((*MockRepository)(nil).CreateTaskLog), ctx, tl)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, u *entity.Users) (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, u)
}

// DeleteAction mocks base method.
func (m *MockRepository) DeleteAction(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAction", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAction indicates an expected call of DeleteAction.
func (mr *MockRepositoryMockRecorder) DeleteAction(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAction", reflect.TypeOf((*MockRepository)(nil).DeleteAction), ctx, id)
}

// DeleteComment mocks base method.
func (m *MockRepository) DeleteComment(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockRepositoryMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepository)(nil).DeleteComment), ctx, id)
}

// DeletePriority mocks base method.
func (m *MockRepository) DeletePriority(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePriority", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePriority indicates an expected call of DeletePriority.
func (mr *MockRepositoryMockRecorder) DeletePriority(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePriority", reflect.TypeOf((*MockRepository)(nil).DeletePriority), ctx, id)
}

// DeleteRole mocks base method.
func (m *MockRepository) DeleteRole(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRepositoryMockRecorder) DeleteRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRepository)(nil).DeleteRole), ctx, id)
}

// DeleteStatus mocks base method.
func (m *MockRepository) DeleteStatus(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatus", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatus indicates an expected call of DeleteStatus.
func (mr *MockRepositoryMockRecorder) DeleteStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatus", reflect.TypeOf((*MockRepository)(nil).DeleteStatus), ctx, id)
}

// DeleteTask mocks base method.
func (m *MockRepository) DeleteTask(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockRepositoryMockRecorder) DeleteTask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockRepository)(nil).DeleteTask), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), ctx, id)
}

// GetAllActions mocks base method.
func (m *MockRepository) GetAllActions(ctx context.Context) ([]entity.Actions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActions", ctx)
	ret0, _ := ret[0].([]entity.Actions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActions indicates an expected call of GetAllActions.
func (mr *MockRepositoryMockRecorder) GetAllActions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActions", reflect.TypeOf((*MockRepository)(nil).GetAllActions), ctx)
}

// GetAllComments mocks base method.
func (m *MockRepository) GetAllComments(ctx context.Context, userID int64) ([]entity.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComments", ctx, userID)
	ret0, _ := ret[0].([]entity.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllComments indicates an expected call of GetAllComments.
func (mr *MockRepositoryMockRecorder) GetAllComments(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComments", reflect.TypeOf((*MockRepository)(nil).GetAllComments), ctx, userID)
}

// GetAllEventsByTaskID mocks base method.
func (m *MockRepository) GetAllEventsByTaskID(ctx context.Context, taskID int64) ([]entity.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEventsByTaskID", ctx, taskID)
	ret0, _ := ret[0].([]entity.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEventsByTaskID indicates an expected call of GetAllEventsByTaskID.
func (mr *MockRepositoryMockRecorder) GetAllEventsByTaskID(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEventsByTaskID", reflect.TypeOf((*MockRepository)(nil).GetAllEventsByTaskID), ctx, taskID)
}

// GetAllPriorities mocks base method.
func (m *MockRepository) GetAllPriorities(ctx context.Context) ([]entity.Priorities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPriorities", ctx)
	ret0, _ := ret[0].([]entity.Priorities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPriorities indicates an expected call of GetAllPriorities.
func (mr *MockRepositoryMockRecorder) GetAllPriorities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPriorities", reflect.TypeOf((*MockRepository)(nil).GetAllPriorities), ctx)
}

// GetAllRoles mocks base method.
func (m *MockRepository) GetAllRoles(ctx context.Context) ([]entity.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", ctx)
	ret0, _ := ret[0].([]entity.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockRepositoryMockRecorder) GetAllRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockRepository)(nil).GetAllRoles), ctx)
}

// GetAllStatuses mocks base method.
func (m *MockRepository) GetAllStatuses(ctx context.Context) ([]entity.Statuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStatuses", ctx)
	ret0, _ := ret[0].([]entity.Statuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStatuses indicates an expected call of GetAllStatuses.
func (mr *MockRepositoryMockRecorder) GetAllStatuses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStatuses", reflect.TypeOf((*MockRepository)(nil).GetAllStatuses), ctx)
}

// GetAllTaskLogsByTaskID mocks base method.
func (m *MockRepository) GetAllTaskLogsByTaskID(ctx context.Context, taskID int64) ([]entity.TaskLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTaskLogsByTaskID", ctx, taskID)
	ret0, _ := ret[0].([]entity.TaskLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTaskLogsByTaskID indicates an expected call of GetAllTaskLogsByTaskID.
func (mr *MockRepositoryMockRecorder) GetAllTaskLogsByTaskID(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTaskLogsByTaskID", reflect.TypeOf((*MockRepository)(nil).GetAllTaskLogsByTaskID), ctx, taskID)
}

// GetAllTasks mocks base method.
func (m *MockRepository) GetAllTasks(ctx context.Context, id int64) ([]entity.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", ctx, id)
	ret0, _ := ret[0].([]entity.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockRepositoryMockRecorder) GetAllTasks(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockRepository)(nil).GetAllTasks), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockRepository) GetUserByEmail(ctx context.Context, email string) (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(ctx context.Context, id int64) (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), ctx, id)
}

// UpdateTask mocks base method.
func (m *MockRepository) UpdateTask(ctx context.Context, t *entity.Tasks) (*entity.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, t)
	ret0, _ := ret[0].(*entity.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockRepositoryMockRecorder) UpdateTask(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockRepository)(nil).UpdateTask), ctx, t)
}

// UpdateTaskLog mocks base method.
func (m *MockRepository) UpdateTaskLog(ctx context.Context, tl *entity.TaskLogs) (*entity.TaskLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskLog", ctx, tl)
	ret0, _ := ret[0].(*entity.TaskLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskLog indicates an expected call of UpdateTaskLog.
func (mr *MockRepositoryMockRecorder) UpdateTaskLog(ctx, tl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskLog", reflect.TypeOf((*MockRepository)(nil).UpdateTaskLog), ctx, tl)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(ctx context.Context, u *entity.Users) (*entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(*entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), ctx, u)
}
